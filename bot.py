import telebot
from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from config import TOKEN
from database import DatabaseManager
from recommender import HybridRecommender
import logging
from typing import Dict, Any, Optional
import threading
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

class RecommendationBot:
    def __init__(self, token: str):
        self.bot = telebot.TeleBot(token)
        self.db = DatabaseManager()
        self.recommender = HybridRecommender(self.db)
        self.user_sessions: Dict[int, Dict[str, Any]] = {}
        self.setup_handlers()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        self._start_background_tasks()

    def _start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î, –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π)"""
        def update_database():
            while True:
                try:
                    logging.info("Running scheduled database update...")
                    time.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
                except Exception as e:
                    logging.error(f"Background task error: {str(e)}")
                    time.sleep(60)
        
        threading.Thread(target=update_database, daemon=True).start()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.bot.message_handler(commands=['start', 'help'])
        def handle_start(message):
            self._handle_start(message)

        @self.bot.message_handler(commands=['preferences'])
        def handle_preferences(message):
            self._handle_preferences(message)

        @self.bot.message_handler(commands=['history'])
        def handle_history(message):
            self._handle_history(message)

        @self.bot.message_handler(func=lambda m: True)
        def handle_text(message):
            self._handle_text(message)

        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback(call):
            self._handle_callback(call)

    def _handle_start(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        self._register_user(message.from_user)
        
        welcome_text = (
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –∫—É—Ä—Å–æ–≤!\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏:\n"
            "- –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏ –º–∏—Ç–∞–ø—ã –ø–æ IT-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º\n"
            "- –û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
            "- –•–∞–∫–∞—Ç–æ–Ω—ã –∏ –∫–æ–Ω–∫—É—Ä—Å—ã\n\n"
            "üîç –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ' –∏–ª–∏ '–∫—É—Ä—Å—ã –ø–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É').\n\n"
            "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
            "/preferences - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n"
            "/history - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤"
        )
        
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        popular_tags = ["ML", "Frontend", "DevOps", "Python", "JavaScript", "Data Science"]
        markup.add(*[KeyboardButton(tag) for tag in popular_tags])
        
        self.bot.send_message(
            chat_id=message.chat.id,
            text=welcome_text,
            reply_markup=markup
        )
        
        logging.info(f"New user session started: {user_id}")

    def _register_user(self, user):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        user_data = {
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
        self.db.update_user(user_data)

    def _handle_preferences(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        user_id = message.from_user.id
        preferences = self.db.get_user_preferences(user_id)
        
        text = (
            "‚öôÔ∏è <b>–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</b>\n\n"
            "–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:\n"
            f"{self._format_preferences(preferences)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="pref_tags"),
            InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="pref_reset")
        )
        
        self.bot.send_message(
            chat_id=message.chat.id,
            text=text,
            reply_markup=markup,
            parse_mode='HTML'
        )

    def _format_preferences(self, preferences: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not preferences:
            return "–ù–µ –∑–∞–¥–∞–Ω—ã"
        
        tags = preferences.get('preferred_tags', [])
        if tags:
            return "üîπ " + "\nüîπ ".join(tags)
        return "–ù–µ –∑–∞–¥–∞–Ω—ã"

    def _handle_history(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        user_id = message.from_user.id
        history = self.db.get_user_history(user_id, limit=10)
        
        if not history:
            self.bot.send_message(
                chat_id=message.chat.id,
                text="üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
            )
            return
        
        text = "üìú <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n\n" + "\n".join(
            f"{i+1}. {item['query']} ({item['timestamp']})"
            for i, item in enumerate(history)
        )
        
        self.bot.send_message(
            chat_id=message.chat.id,
            text=text,
            parse_mode='HTML'
        )

    def _handle_text(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        user_id = message.from_user.id
        query = message.text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.db.log_user_query(user_id, query)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self.recommender.recommend(
            query=query,
            user_id=user_id,
            limit=5
        )
        
        if not recommendations:
            self.bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self._send_recommendations(message.chat.id, recommendations)

        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üëç –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data="feedback_good"),
            InlineKeyboardButton("üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", callback_data="feedback_bad")
        )
        
        self.bot.send_message(
            chat_id=message.chat.id,
            reply_markup=markup
        )

    def _send_recommendations(self, chat_id, recommendations):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        for rec in recommendations:
            item_type = "üé§ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ" if rec['type'] == 'event' else "üìö –ö—É—Ä—Å"
            score = f"–†–µ–π—Ç–∏–Ω–≥: {rec['score']:.2f}" if rec['score'] > 0 else ""
            
            text = (
                f"{item_type}\n"
                f"<b>{rec['title']}</b>\n\n"
                f"{rec['description'][:200]}...\n\n"
                f"üè∑Ô∏è <i>{rec['tags']}</i>\n"
                f"{score}\n\n"
                f"üîó <a href='{rec['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
            )
            
            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton("üëç", callback_data=f"like_{rec['type']}_{rec['id']}"),
                InlineKeyboardButton("üëé", callback_data=f"dislike_{rec['type']}_{rec['id']}"),
                InlineKeyboardButton("‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"bookmark_{rec['type']}_{rec['id']}")
            )
            
            self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )

    def _handle_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        user_id = call.from_user.id
        data = call.data
        
        try:
            if data.startswith(('like_', 'dislike_', 'bookmark_')):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤
                action, item_type, item_id = data.split('_')
                interaction_type = {
                    'like': 'like',
                    'dislike': 'dislike',
                    'bookmark': 'bookmark'
                }[action]
                
                self.db.log_interaction(
                    user_id=user_id,
                    item_id=int(item_id),
                    item_type=item_type,
                    interaction_type=interaction_type
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.recommender.train_user_preferences(user_id)
                
                self.bot.answer_callback_query(
                    call.id,
                    text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.",
                    show_alert=False
                )
                
            elif data == 'feedback_good':
                self.bot.answer_callback_query(
                    call.id,
                    text="–†–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!",
                    show_alert=False
                )
                
            elif data == 'feedback_bad':
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="–ñ–∞–ª—å, —á—Ç–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."
                )
                
            elif data.startswith('pref_'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
                if data == 'pref_tags':
                    self._edit_tags(call)
                elif data == 'pref_reset':
                    self.db.update_user_preferences(user_id, {})
                    self.bot.answer_callback_query(
                        call.id,
                        text="–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã",
                        show_alert=False
                    )
                
        except Exception as e:
            logging.error(f"Callback error: {str(e)}")
            self.bot.answer_callback_query(
                call.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                show_alert=True
            )

    def _edit_tags(self, call):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        user_id = call.from_user.id
        all_tags = self.db.get_all_tags()
        
        markup = InlineKeyboardMarkup(row_width=3)
        for tag in all_tags[:15]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            markup.add(InlineKeyboardButton(
                text=f"{'‚úÖ' if tag in self.db.get_user_preferences(user_id).get('preferred_tags', []) else 'üîπ'} {tag}",
                callback_data=f"tag_toggle_{tag}"
            ))
        
        markup.row(
            InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="tags_done"),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="tags_cancel")
        )
        
        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–≥–∏:",
            reply_markup=markup
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logging.info("Starting recommendation bot...")
        self.bot.infinity_polling()

if __name__ == "__main__":
    bot = RecommendationBot(TOKEN)
    bot.run()